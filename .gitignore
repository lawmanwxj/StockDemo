
// StockDDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "StockD.h"
#include "StockDDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

using namespace std;
// CStockDDlg 对话框

void CALLBACK TimerProc(HWND hwnd,UINT uMsg,UINT idEvent,DWORD dwTime );

CStockDDlg::CStockDDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CStockDDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
	hasData=false;
	showCount=2000;
	bias=0;
}

void CStockDDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	
}

BEGIN_MESSAGE_MAP(CStockDDlg, CDialogEx)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()

	ON_COMMAND(ID_BUTTON_LEFT, &CStockDDlg::OnButtonLeft)
	ON_COMMAND(ID_BUTTON_RIGHT, &CStockDDlg::OnButtonRight)
	ON_COMMAND(ID_BUTTON_UP, &CStockDDlg::OnButtonUp)
	ON_COMMAND(ID_BUTTON_DOWN, &CStockDDlg::OnButtonDown)
END_MESSAGE_MAP()


// CStockDDlg 消息处理程序

BOOL CStockDDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标
	
	if (!myToolBar.CreateEx(this, TBSTYLE_FLAT,  WS_CHILD | WS_VISIBLE | CBRS_ALIGN_TOP | CBRS_GRIPPER | 
         CBRS_TOOLTIPS) || !myToolBar.LoadToolBar(IDR_TOOLBAR1) )
    {
        AfxMessageBox(TEXT("Failed to create toolbar!"),NULL,NULL);
        return FALSE;
    }
  
      //添加工具栏
    RepositionBars(AFX_IDW_CONTROLBAR_FIRST, AFX_IDW_CONTROLBAR_LAST, 0);
	ShowWindow(SW_MAXIMIZE);
	ShowWindow(SW_MAXIMIZE);

	// TODO: 在此添加额外的初始化代码
	InitData();
	hasData=true;

	SetTimer(1,1000,(TIMERPROC)TimerProc);
	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CStockDDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		

		Layout();
		if (hasData)
		{
			ShowData();
		}
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CStockDDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

void CStockDDlg::Layout()
{
	CRect rect;
	GetClientRect(&rect);


	int x=rect.Width();
	int y=rect.Height();
	//CDC dc(this);
	
	CDC* pDC=GetDC();
	CPen redPen(PS_SOLID,1,RGB(255,0,0));
	CPen* oldPen=pDC->SelectObject(&redPen);
	
	
	
	
    rightMargin=80;
	topMargin=50;
	bottomMargin=30;
	leftMargin=50;
	midMargin=50;
	//int desplayBars=2000;  //显示的点数
	int panelWidth=x-leftMargin-rightMargin;
	int stkHeight=(y-(topMargin+bottomMargin+midMargin))/2;
	picWidth=panelWidth;
	picHeight=stkHeight;

	pDC->Rectangle(leftMargin,topMargin-20,panelWidth+leftMargin+20,stkHeight+topMargin+2);
	pDC->Rectangle(leftMargin,topMargin+stkHeight+midMargin-20,panelWidth+leftMargin+20,y-bottomMargin+2);
	/*
	for(int i=1;i<16;i++)
	{
		pDC->MoveTo(leftMargin+i*panelWidth/16,stkHeight+topMargin);
		pDC->LineTo(leftMargin+i*panelWidth/16,stkHeight+topMargin-5);

		pDC->MoveTo(leftMargin+i*panelWidth/16,y-bottomMargin);
		pDC->LineTo(leftMargin+i*panelWidth/16,y-bottomMargin-5);
	} */

	CPen bluePen(PS_DASH,0.1f,RGB(255,200,200));
	pDC->SelectObject(&bluePen);

	for(int i=1;i<6;i++)
	{
		pDC->MoveTo(leftMargin,topMargin+i*stkHeight/6);
		pDC->LineTo(x-rightMargin,topMargin+i*stkHeight/6);

		pDC->MoveTo(leftMargin,topMargin+stkHeight+midMargin+i*stkHeight/6);
		pDC->LineTo(x-rightMargin,topMargin+stkHeight+midMargin+i*stkHeight/6);
	}
	pDC->SelectObject(oldPen);
	//AfxMessageBox(strScreen); 
}

void CStockDDlg::ReadData(string code,map<time_t,float>* pMap)
{
	   char buffer[256]; 
	   string fn="E:\\360云盘\\software\\TB数据\\"+code+"(1tick).csv";
	   char  cfn[50];
       
	   strcpy_s(cfn,50,fn.c_str());
       //
       ifstream in(cfn);  
       
       if (! in.is_open())  
       { MessageBox( "Error opening file"); exit (1); }  

       while (!in.eof() )  
       {  
		   
           in.getline (buffer,100); 
		   
		   if (strlen(buffer)>10)
		   {
		       string data=buffer;
		       int i=data.find(" ");

		       string day=data.substr(0,i);
			   struct tm  tm0;
			   struct tm * ptm=&tm0;
			   data=data.substr(i+1);
			   ptm->tm_hour= atoi((data.substr(0,2)).c_str());
			   ptm->tm_min=atoi((data.substr(3,2)).c_str());
			   ptm->tm_sec=atoi((data.substr(6,2)).c_str());
			   ptm->tm_mday=atoi((day.substr(8,2)).c_str());
			   ptm->tm_mon=atoi((day.substr(5,2)).c_str())-1;
			   ptm->tm_year=atoi((day.substr(0,4)).c_str())-1900;
			   time_t tt=mktime(ptm);  
               //cout<<ptm->tm_year+1900<<"-"<<ptm->tm_mon<<"-"<<ptm->tm_mday<<" ";
		       //cout<<ptm->tm_hour<<":"<<ptm->tm_min<<":"<<ptm->tm_sec<<endl;
			   
			   data=buffer;
			   for(int j=0;j<4;j++)
			   {
				   i=data.find(",");
				   data=data.substr(i+1);
			   }
			   
			   i=data.find(",");
			   data=data.substr(0,i);
			   float price=atof(data.c_str());
			   
			   (*pMap)[tt]=price;

		   }
		   
           
       } 

	   in.close();

}

void CStockDDlg::InitData()
{
	stkCode="300024";
	IdxCode="000001";
	map<time_t,float> map1,map2;
	map<time_t,float>* pm;
	pm=&stkData;
	ReadData(stkCode,pm);
    map1=stkData;
	//取最后一天股数据
	map<time_t,float>::reverse_iterator rit;
	rit=map1.rbegin();
	endTime=rit->first;
	tm *tm0;
	tm0=localtime(&endTime);
	tm0->tm_hour=0;
	time_t day=mktime(tm0);
	while(rit->first>day)
	{
		map2[rit->first]=rit->second;
		rit++;
		if (rit==map1.rend()) break;
	}
	//CString str1;
	
	//
	map<time_t,float>::iterator it;
	it=map2.begin();
	time_t tz=it->first;
	beginTime=tz;
	int i=0;
	for(i=0;i<5000;i++)
	{
		time_t tt=it->first;
        stkPrice[i]=it->second;
        tz=tz+3;

		tm *tm0;
		tm0=localtime(&tz);
		if (tm0->tm_hour==11 && tm0->tm_min>=30)
		{
			tm0->tm_hour=13;
			tm0->tm_min=30;
			tm0->tm_sec=0;
			tz=mktime(tm0);
			
		}

		while(tt<=tz)
		{
			it++;
			if (it==map2.end()) break;
			tt=it->first;
		}
		if (it==map2.end()) break;
		
		it--;

	}
	dataCount=i;

	map1.clear();
	map2.clear();
	pm=&IdxData;
	ReadData(IdxCode,pm);
	map1=IdxData;
	rit=map1.rbegin();
	while(rit->first>=beginTime && rit->first<=endTime)
	{
		map2[rit->first]=rit->second;
		rit++;
		if (rit==map1.rend()) break;
	}

	it=map2.begin();
	tz=beginTime;
	
	for(int i=0;i<5000;i++)
	{
		if (it!=map2.end())
		{
		time_t tt=it->first;
        IdxPrice[i]=it->second;
        tz=tz+3;

		tm *tm0;
		tm0=localtime(&tz);
		if (tm0->tm_hour==11 && tm0->tm_min>=30)
		{
			tm0->tm_hour=13;
			tm0->tm_min=30;
			tm0->tm_sec=0;
			tz=mktime(tm0);
			
		}

		while(tt<=tz)
		{
			it++;
			if (it==map2.end()) break;
			tt=it->first;
		}
		//if (it==map2.end()) break;
		
		it--;
		}
		else IdxPrice[i]=0;

	}
	/*CString str;
	str.Format("%f",IdxPrice[0]);
	MessageBox(str);*/

	
}

void CStockDDlg::ShowData()
{
	float stkHigh=0,stkLow=0,IdxHigh=0,IdxLow=0;
	int begin=dataCount-showCount+bias;
	if (begin<0){begin=0;}
	stkHigh=stkPrice[begin];
	stkLow=stkPrice[begin];
	IdxHigh=IdxPrice[begin];
	IdxLow=IdxPrice[begin];
	for(int i=begin;i<dataCount;i++)
	{
		if (stkPrice[i]>stkHigh) stkHigh=stkPrice[i];
		if (stkPrice[i]<stkLow) stkLow=stkPrice[i];

		if (IdxPrice[i]>IdxHigh) IdxHigh=IdxPrice[i];
		if (IdxPrice[i]<IdxLow) IdxLow=IdxPrice[i];

	}
	
	/*str1.Format("%f:%f",IdxHigh,IdxLow);
	MessageBox(str1);*/
	
    float xVal=(float)picWidth/(float)showCount; 
	

	float yStkVal;
	if(stkHigh-stkLow>0)
		yStkVal=(float)picHeight/(float)(stkHigh-stkLow);
	else
		yStkVal=picHeight;
	float yIdxVal;
	if(IdxHigh-IdxLow>0)
		yIdxVal=(float)picHeight/(float)(IdxHigh-IdxLow);
	else
		yIdxVal=picHeight;


	CDC* pDC=GetDC();
	
	
	//===================================================================
	//画时间刻度
	CPen pen1;
	pen1.CreatePen(PS_DASH,0,RGB(255,255,255));
	CBrush* brush1= (CBrush*)GetClassLong(NULL, GCL_HBRBACKGROUND);
	CBrush* oldBrush=pDC->SelectObject(brush1);
	CPen* oldPen=pDC->SelectObject(&pen1);
	pDC->Rectangle(0,picHeight+topMargin+3,picWidth+leftMargin+rightMargin,picHeight+topMargin+midMargin);
	pDC->Rectangle(0,picHeight*2+midMargin+topMargin+4,picWidth+leftMargin+rightMargin,picHeight*2+topMargin+midMargin+bottomMargin);

	//以上刷新时间轴原有字迹
    CPen redPen(PS_SOLID,1,RGB(255,0,0));
	pDC->SelectObject(&redPen);
	pDC->SelectObject(oldBrush);
    pDC->SetTextColor(RGB(255,0,0));

	time_t sT=beginTime+begin*3;      //起始时间
	
	tm* tm0;
	tm0=localtime(&sT);
	int ss=tm0->tm_min*60+tm0->tm_sec;
	int h0=tm0->tm_hour;
	CString str1;
	str1.Format("%4d-%2d-%2d",tm0->tm_year+1900,tm0->tm_mon+1,tm0->tm_mday);
	pDC->TextOut(leftMargin-10,picHeight*2+topMargin+midMargin+2,str1);
	if (h0==11)
	{
		tm0->tm_hour=13;
	    tm0->tm_min=0;
	    tm0->tm_sec=0;

	}
	else
	{
	    tm0->tm_hour=tm0->tm_hour+1;
	    tm0->tm_min=0;
	    tm0->tm_sec=0;
	}
	time_t t0=mktime(tm0);
    
	time_t tt=t0;       //起始整点时间
	int q=0;
	while(tt<=endTime)
	{
		
	    tm* tm1;
	    tm1=localtime(&tt);
        
	    int xx=(60*60-ss+15*60*q)*xVal/3+leftMargin;
	    if(tm1->tm_hour==11&&tm1->tm_min>=30)
	    {
		    tm1->tm_hour=13;
			tm1->tm_min=0;
	
	    }

		if(tm1->tm_hour>=15)
	    {
			tm1->tm_mday=tm1->tm_mday+1;
		    tm1->tm_hour=9;
			tm1->tm_min=30;
		}

		tt=mktime(tm1);
		

	    pDC->MoveTo(xx,picHeight+topMargin);
	    pDC->LineTo(xx,picHeight+topMargin-5);

		pDC->MoveTo(xx,picHeight*2+topMargin+midMargin);
	    pDC->LineTo(xx,picHeight*2+topMargin+midMargin-5);
		
	    str1.Format("%2d:%2d",tm1->tm_hour,tm1->tm_min);
	    pDC->TextOut(xx-10,picHeight+topMargin+2,str1);
		pDC->TextOut(xx-10,picHeight*2+topMargin+midMargin+2,str1);
		tt=tt+15*60;
		q++;
	}
  //============================================================================
	//画价格刻度
	for(int i=0;i<6;i++)
	{
		float stkP=stkHigh-(stkHigh-stkLow)*i/6;
		CString str;
		str.Format("%.2f",stkP);
		pDC->TextOut(10,topMargin+i*picHeight/6,str);
		pDC->TextOut(picWidth+leftMargin+20,topMargin+i*picHeight/6,str);

		float IdxP=IdxHigh-(IdxHigh-IdxLow)*i/6;
		str.Format("%.2f",IdxP);
		pDC->TextOut(10,topMargin+picHeight+midMargin+i*picHeight/6,str);
		pDC->TextOut(picWidth+leftMargin+20,topMargin+picHeight+midMargin+i*picHeight/6,str);
	}

  //============================================================================
		
	int j=0;
	for(int i=begin;i<dataCount;i++)
	{
		int x=j*xVal+leftMargin;
		
		int y=(stkHigh-stkPrice[i])*yStkVal+topMargin;
		CPoint dot=CPoint(x,y);
		stkDots[j]=dot;
		
		y=(IdxHigh-IdxPrice[i])*yIdxVal+topMargin+midMargin+picHeight+20*2;
		dot=CPoint(x,y);
		IdxDots[j]=dot;
		j++;
	}
	//CString str1;
	/*str1.Format("%d:%d",((stkDots[0]).x,stkDots[0]).y);
	MessageBox(str1);*/
	
	CPen bluePen(PS_SOLID,1,RGB(100,100,255));
	pDC->SelectObject(&bluePen);

	pDC->Polyline(stkDots,j);
	pDC->Polyline(IdxDots,j);

	//newPen=pDC->SelectObject(oldPen);
}

void CStockDDlg::Update()
{
	//AfxMessageBox("Timer is running!");//定时器时间到，强出一对话框，表明定时器已经运行。
	
	stkPrice[dataCount]=28.8;
	IdxPrice[dataCount]=3050;
	
	OnPaint();
	/*time_t tNow=time(0);
	tm* tm0=localtime(&tNow);
	if(tm0->tm_hour<9||(tm0->tm_hour==9 && tm0->tm_min<30)||(tm0->hour==11 &&tm0->tm_min>29)||tm0->tm_hour==12||tm0->tm_hour>14)
	{ return;}

	float stkP=GetPrice(stkCode);
	stkPrice[dataCount]=stkP;

	float IdxP=GetPrice(IdxCode);
	IdxPrice[dataCount]=IdxP;*/

    dataCount++;
}

void CStockDDlg::Move(int dir)
{
	bias=bias+dir*200;
	if(bias>2000 )
		bias=2000;
	else if(bias<-2000)
		bias=-2000;
	//Invalidate();
		
	OnPaint();
	
}

void CALLBACK TimerProc(HWND hwnd,UINT uMsg,UINT idEvent,DWORD dwTime )

{
	CStockDApp* app=(CStockDApp*)AfxGetApp();
	CStockDDlg* dlg=(CStockDDlg*)app->m_pMainWnd;
	dlg->Update();
}




void CStockDDlg::OnButtonLeft()
{
	// TODO: 在此添加命令处理程序代码
	Move(1);
}


void CStockDDlg::OnButtonRight()
{
	// TODO: 在此添加命令处理程序代码
	Move(-1);
}


void CStockDDlg::OnButtonUp()
{
	// TODO: 在此添加命令处理程序代码
}


void CStockDDlg::OnButtonDown()
{
	// TODO: 在此添加命令处理程序代码
}
